import * as mongoose from 'mongoose';

export const <%= singular(classify(name)) %>Schema = new mongoose.Schema({}, {versionKey: false});
<%# Properties section %>
<%= singular(classify(name)) %>Schema.add({<% for ([key, options] of keys) { %>
    <%= key %>: {<% if(options.type !== undefined) { %>type: <%= options.type %>,<% } %><% if(options.required !== undefined) { %>required: <%= options.required %>,<% } %><% if(options.default !== undefined) { %>default: '<%= options.default %>',<% } %><% if(options.unique !== undefined) { %>unique: <%= options.unique %>,<% } %><% if(options.enum !== undefined) { %>enum: [<%= options.enum.map(e => `'${e}'`) %>] <% } %><% if(options.minlength !== undefined) { %>minlength: <%= options.minlength %>,<% } %><% if(options.maxlength !== undefined) { %>maxlength: <%= options.maxlength %>,<% } %><% if(options.min !== undefined) { %>min: <%= options.min %>,<% } %><% if(options.max !== undefined) { %>max: <%= options.max %>,<% } %><% if(options.validate !== undefined) { %>validate: <%= key.validate %>,<% } %><% if(options.match !== undefined) { %>match: /<%= options.match %>/,<% } %><% if(options.index !== undefined) { %>index: <%= options.index %>,<% } %><% if(options.lowercase !== undefined) { %>lowercase: <%= options.lowercase %>,<% } %><% if(options.uppercase !== undefined) { %>uppercase: <%= options.uppercase %>,<% } %><% if(options.trim !== undefined) { %>trim: <%= options.trim %>,<% } %>},<% } %>
});
<%# Indexs section %>
<% for ([key, options] of keys) { %><% if(options.isKey !== undefined && !!options.isKey) { %>
<%= singular(classify(name)) %>Schema.index({<%= key %>: 1}, {unique: true});<% } %><% } %>