import {Int, Field, Type} from '@nestjs/graphql';
import {<% if(keys.some(o => o[1].minlength !== undefined)) { %>Min, <% } %><% if(keys.some(o => o[1].maxlength !== undefined)) { %>Max, <% } %><% if(keys.some(o => o[1].uppercase !== undefined)) { %>IsUppercase, <% } %><% if(keys.some(o => o[1].lowercase !== undefined)) { %>IsLowercase, <% } %><% if(keys.some(o => o[1].type === 'String')) { %>IsString, <% } %><% if(keys.some(o => ['Number', 'Float', 'ID'].some(i => o[1].type === i))) { %>IsInt, <% } %><% if(keys.some(o => o[1].type === 'Date')) { %>IsDate, <% } %><% if(keys.some(o => o[1].type === 'boolean')) { %>IsBoolean, <% } %>} from "class-validator";
<% for([key, content] of keys.filter(([key, content]) => !!content.importUrl)) { %>import { Get<%= singular(classify(content.type)) %> } from '<%= content.importUrl %><% if(content.importUrl !== './'){ %><%= 'dto/' %><% } %>get-<%= singular(dasherize(content.type)) %>.input.dto';<% } %>

@Type()
export class Get<%= singular(classify(name)) %> {<% for ([key, options] of skipIndexes ? keys : keys.filter(key => !!key[1].isIndex) ) { %>
    @Field(() => <%- options.type %>, {<%if(options.required !== undefined && options.required === false){%>nullable: true, <% } %><% if(options.description !== undefined) { %>description: '<%- options.description %>', <% } %><% if(options.name !== undefined) { %>name: '<%- options.name %>', <% } %><% if(options.deprecationReason !== undefined) { %>deprecationReason: '<%- options.deprecationReason %>', <% } %><% if(options.complexity !== undefined) { %>complexity: '<%- options.complexity %>', <% } %><% if(options.middleware !== undefined) { %>middleware: '<%- options.middleware %>'<% } %>})<% if(options.minlength !== undefined) { %>
    @Min(<%= options.minlength %>)<% } %> <% if(options.maxlength !== undefined) { %>
    @Max(<%= options.maxlength %>)<% } %> <% if(options.uppercase !== undefined) { %>
    @IsUppercase()<% } %> <% if(options.lowercase !== undefined) { %>
    @IsLowercase()<% } %> <% if(options.type === 'String') { %>
    @IsString()
    <%= key %>: string;<% } %> <% if( ['Number', 'Float', 'ID'].some(i => options.type === i) ) { %>
    @IsInt()
    <%= key %>: number;<% } %> <% if(options.type === 'Date') { %>
    @IsDate()
    <%= key %>: Date;<% } %> <% if(options.type === 'boolean') { %>
    @IsBoolean()
    <%= key %>: boolean;<% } %> <% if(!['Number', 'Float', 'ID', 'boolean', 'Date', 'String'].some(i => options.type === i)) { %>
    <%= key %>: <%= classify(options.type) %>;<% } %>
<% } %>
}
