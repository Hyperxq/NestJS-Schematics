import { Injectable } from '@nestjs/common';
<%= imports %>


@Injectable()
export class <%= singular(classify(name)) %>Service {
    constructor(private readonly repo: <%= singular(classify(name)) %>Repository) {}

    async create(create<%= singular(classify(name)) %>: Create<%= singular(classify(name)) %>Input): Promise<<%= singular(classify(name)) %>> {
        return await this.repo.create<Create<%= singular(classify(name)) %>Input, <%= singular(classify(name)) %>>(create<%= singular(classify(name)) %>);
    }

    async findAll(): Promise<<%= singular(classify(name)) %>[] | undefined> {
        return await this.repo.findMany<<%= singular(classify(name)) %>>({});
    }

    async findOne(get<%= singular(classify(name)) %>: Get<%= singular(classify(name)) %>Input): Promise<<%= singular(classify(name)) %>> {
        return await this.repo.findOne<<%= singular(classify(name)) %>>(get<%= singular(classify(name)) %>);
    }

    async update({query, payload}: Update<%= singular(classify(name)) %>Args): Promise<<%= singular(classify(name)) %>> {
        return await this.repo.update<<%= singular(classify(name)) %>>(query, payload, {upsert: false});
    }

    async remove(remove<%= singular(classify(name)) %>: Get<%= singular(classify(name)) %>Input): Promise<<%= singular(classify(name)) %>> {
        return await this.repo.remove<<%= singular(classify(name)) %>>(remove<%= singular(classify(name)) %>);
    }
}